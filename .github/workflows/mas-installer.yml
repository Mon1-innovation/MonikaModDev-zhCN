name: MAS Installer Workflow

on:
  workflow_dispatch:  # Allow manual triggering
  # Uncomment and modify as needed for automatic triggers
  # push:
  #   branches: [ master ]
  # pull_request:
  #   branches: [ master ]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install GitHub CLI
      run: |
        # Install GitHub CLI
        choco install gh -y
      shell: powershell

    - name: Download Release Assets
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Explicitly set repository details
        $repoOwner = "Mon1-innovation"
        $repoName = "MASToolScript"

        try {
          # Get the latest release tag
          $latestTag = (gh release list -R "$repoOwner/$repoName" --json tagName --limit 1 | ConvertFrom-Json).tagName

          if (-not $latestTag) {
            throw "No releases found"
          }

          # Create a directory for assets
          New-Item -ItemType Directory -Path .\MAS_Release_Assets

          # Set working directory to the assets folder
          Set-Location .\MAS_Release_Assets

          # Download all non-source code assets
          $assets = gh release view $latestTag -R "$repoOwner/$repoName" --json assets --jq '.assets[] | select(.name | test("\\.exe$|\\.dll$|\\.zip$|\\.7z$|\\.rar$")) | .name'

          if ($assets) {
            foreach ($asset in $assets) {
              Write-Host "Downloading asset: $asset"
              gh release download $latestTag -R "$repoOwner/$repoName" -p "$asset"
            }

            # List downloaded assets
            Get-ChildItem
          } else {
            Write-Host "No downloadable assets found in the release"
          }
        } catch {
          Write-Error "Failed to download release assets: $_"
          exit 1
        }
      shell: pwsh

    - name: Upload Release Assets
      uses: actions/upload-artifact@v4
      with:
        name: MAS-Release-Assets
        path: .\MAS_Release_Assets\*
        retention-days: 5

    - name: Prepare Installation Directory
      run: |
        New-Item -ItemType Directory -Path .\MAS_Install
        Move-Item -Path .\MAS_Release_Assets\MasInstaller.exe -Destination .\MAS_Install\ -ErrorAction SilentlyContinue
      shell: powershell

    - name: Run MasInstaller.exe
      run: |
        # Set PowerShell to use UTF-8 encoding
        $PSDefaultParameterValues['*:Encoding'] = 'utf8'

        # Temporarily set console output encoding to UTF-8
        [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
        [Console]::InputEncoding = [System.Text.Encoding]::UTF8

        Set-Location .\MAS_Install

        # Prepare for potential encoding issues
        $env:PYTHONIOENCODING = 'utf-8'
        $env:PYTHONUTF8 = '1'

        # Try to run the installer with error handling
        try {
          # Use cmd.exe to potentially bypass some encoding issues
          $process = Start-Process cmd.exe -ArgumentList "/c MasInstaller.exe" -PassThru -NoNewWindow -Wait

          # Check exit code
          if ($process.ExitCode -ne 0) {
            Write-Error "Installer exited with code $($process.ExitCode)"
            exit 1
          }
        } catch {
          Write-Error "Error running installer: $_"
          exit 1
        }
      shell: powershell

    - name: Upload Installation Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: MAS-Installation
        path: .\MAS_Install\*
        retention-days: 5